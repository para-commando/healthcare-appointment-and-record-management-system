// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using clinical_data_grid.database;

#nullable disable

namespace clinical_data_grid.database.migrations
{
    [DbContext(typeof(postgresHealthCareDbContext))]
    [Migration("20241204090209_diseases_and_associated_tables")]
    partial class diseases_and_associated_tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("clinical_data_grid.database.models.Diseases", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("id");

                    b.ToTable("diseases", (string)null);
                });

            modelBuilder.Entity("clinical_data_grid.database.models.MedicalSideEffects", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("sideEffects")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("side_effects");

                    b.HasKey("id");

                    b.ToTable("medical_side_effects", (string)null);
                });

            modelBuilder.Entity("clinical_data_grid.database.models.MedicineBenefits", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("benefit")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("benefit");

                    b.HasKey("id");

                    b.ToTable("medicine_benefits", (string)null);
                });

            modelBuilder.Entity("clinical_data_grid.database.models.Medicines", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("details")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("medicine_details");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("medicine_name");

                    b.HasKey("id");

                    b.ToTable("medicines", (string)null);
                });

            modelBuilder.Entity("clinical_data_grid.database.models.PrescriptionTemplate", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("id");

                    b.ToTable("prescription_template");
                });

            modelBuilder.Entity("clinical_data_grid.database.models.Symptoms", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("id");

                    b.ToTable("symptoms");
                });

            modelBuilder.Entity("medicine_benefits_join", b =>
                {
                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<int>("BenefitId")
                        .HasColumnType("integer");

                    b.HasKey("MedicineId", "BenefitId");

                    b.HasIndex("BenefitId");

                    b.ToTable("medicine_benefits_join", (string)null);
                });

            modelBuilder.Entity("medicine_sideEffects_join", b =>
                {
                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<int>("SideEffectId")
                        .HasColumnType("integer");

                    b.HasKey("MedicineId", "SideEffectId");

                    b.HasIndex("SideEffectId");

                    b.ToTable("medicine_sideEffects_join", (string)null);
                });

            modelBuilder.Entity("symptoms_diseases_join", b =>
                {
                    b.Property<int>("DiseasesId")
                        .HasColumnType("integer");

                    b.Property<int>("SymptomsId")
                        .HasColumnType("integer");

                    b.HasKey("DiseasesId", "SymptomsId");

                    b.HasIndex("SymptomsId");

                    b.ToTable("symptoms_diseases_join", (string)null);
                });

            modelBuilder.Entity("symptoms_medicine_join", b =>
                {
                    b.Property<int>("DiseasesId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicinesId")
                        .HasColumnType("integer");

                    b.HasKey("DiseasesId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("symptoms_medicine_join", (string)null);
                });

            modelBuilder.Entity("medicine_benefits_join", b =>
                {
                    b.HasOne("clinical_data_grid.database.models.MedicineBenefits", null)
                        .WithMany()
                        .HasForeignKey("BenefitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clinical_data_grid.database.models.Medicines", null)
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("medicine_sideEffects_join", b =>
                {
                    b.HasOne("clinical_data_grid.database.models.Medicines", null)
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clinical_data_grid.database.models.MedicalSideEffects", null)
                        .WithMany()
                        .HasForeignKey("SideEffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("symptoms_diseases_join", b =>
                {
                    b.HasOne("clinical_data_grid.database.models.Diseases", null)
                        .WithMany()
                        .HasForeignKey("DiseasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clinical_data_grid.database.models.Symptoms", null)
                        .WithMany()
                        .HasForeignKey("SymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("symptoms_medicine_join", b =>
                {
                    b.HasOne("clinical_data_grid.database.models.Diseases", null)
                        .WithMany()
                        .HasForeignKey("DiseasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clinical_data_grid.database.models.Medicines", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
